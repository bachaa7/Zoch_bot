from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import types

from app.keyboards import DefinitionCallbackFactory
from app.keyboards import definitions_keyboard
from add_defiition import add_definition_to_concept

import app.keyboards as kb

router = Router()

# –°—Ç–µ–π—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Register(StatesGroup):
    name = State()
    age = State()
    number = State()


@router.message(CommandStart())  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫', reply_markup=kb.main)
    await message.reply('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç')

@router.message(Command('help'))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def cmd_help(message: Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏. –ï—Å–ª–∏ –≤—ã –Ω–∞–¥–µ–µ—Ç–µ—Å—å –Ω–∞ –ø–æ–º–æ—â—å,—Ç–æ —ç—Ç–æ –Ω–µ –∑—Ä—è.")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ "–æ –Ω–∞—Å"
@router.message(F.text == "–æ –Ω–∞—Å")
async def about_us(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ ", reply_markup=kb.about_us)

# Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ö–∞–∑–∞—á–µ–Ω–∫–æ
@router.callback_query(F.data == 'Kazachenka')
async def Kazachenka(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–∞–∑–∞—á–µ–Ω–∫–æ", show_alert=True)
    await callback.message.answer("–ö–∞–∑–∞—á–µ–Ω–∫–æ –í–∞–¥–∏–º –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á - —Å—Ç—É–¥–µ–Ω—Ç –ë–ì–£–ò–†")

# Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ö–æ–≤–∞–ª—å—á—É–∫–∞
@router.callback_query(F.data == 'Kovalchyk')
async def Kovalchyk(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–≤–Ω–∞", show_alert=True)
    await callback.message.answer("–ö–æ–≤–∞–ª—å—á—É–∫ –í–∏–∫—Ç–æ—Ä–∏—è - –ª—é–±–∏—Ç –ø–æ–º–∞—Ü–∞—Ç—å –ø—è—Ç–æ—á–∫–∏.")

# Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ß–µ—Ä–µ—Ç—É–∫–∞
@router.callback_query(F.data == 'Cheretyk')
async def Cheretyk(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–µ—Ä—Ç–∞", show_alert=True)
    await callback.message.answer("–ß–µ—Ä–µ—Ç—É–Ω - –ú–∏–Ω—Å–∫–∏–π Messi.")



@router.message(F.text == "–ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
async def about_us(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ: ", reply_markup=kb.concept_lookup_button())






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
@router.message(F.text == "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
async def about_us(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: ", reply_markup=kb.fuction_keyboard)
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ "—Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π"
@router.callback_query(F.data == 'calculate_calories')
async def calculate_calories(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ ", show_alert=True)
    await callback.message.answer("–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command('register'))
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è: ")

@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")

@router.message(Register.age)
async def register_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Register.number)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=kb.get_number)

@router.message(Register.number, F.contact)
async def register_number(message: Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(f"–í–∞—à–µ –∏–º—è: {data['name']}\n –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {data['age']}\n –ù–æ–º–µ—Ä: {data['number']}")
    await state.clear()



 
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
# @router.message(F.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
# async def send_recommend_menu(message: Message):
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π üëá", reply_markup=kb.recommend_keyboard)

@router.callback_query(F.data == 'recomendation')
async def send_recommend_menu_inline(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π üëá", reply_markup=kb.recommend_keyboard)
    await callback.answer()


@router.callback_query(F.data == "food_recommend")
async def food_recommend(callback: CallbackQuery):
    await callback.message.answer(
        "ü•£ **–ó–∞–≤—Ç—Ä–∞–∫** (07:00‚Äì09:00)\n"
        "‚úÖ –û–≤—Å—è–Ω–∫–∞ –Ω–∞ –≤–æ–¥–µ –∏–ª–∏ –º–æ–ª–æ–∫–µ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏\n"
        "‚úÖ –Ø–π—Ü–∞ (–≤–∞—Ä—ë–Ω—ã–µ –∏–ª–∏ –æ–º–ª–µ—Ç)\n"
        "‚úÖ –¢–æ—Å—Ç –∏–∑ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ö–ª–µ–±–∞ + –∞–≤–æ–∫–∞–¥–æ\n"
        "‚öñÔ∏è –ö–ë–ñ–£: 30% —É–≥–ª–µ–≤–æ–¥—ã, 30% –±–µ–ª–∫–∏, 40% –∂–∏—Ä—ã\n\n"
        "üç≤ **–û–±–µ–¥** (12:00‚Äì14:00)\n"
        "‚úÖ –û—Ç–≤–∞—Ä–Ω–∞—è –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ / —Ä—ã–±–∞\n"
        "‚úÖ –†–∏—Å, –∫–∏–Ω–æ–∞, –≥—Ä–µ—á–∫–∞\n"
        "‚úÖ –û–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º\n"
        "‚öñÔ∏è –ö–ë–ñ–£: 40% —É–≥–ª–µ–≤–æ–¥—ã, 35% –±–µ–ª–∫–∏, 25% –∂–∏—Ä—ã\n\n"
        "üçΩ **–£–∂–∏–Ω** (18:00‚Äì20:00)\n"
        "‚úÖ –¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏ –∏–ª–∏ –∑–∞–ø–µ—á—ë–Ω–Ω—ã–µ –æ–≤–æ—â–∏ —Å –±–µ–ª–∫–æ–º\n"
        "‚úÖ –°—É–ø-–ø—é—Ä–µ –∏–ª–∏ –æ–º–ª–µ—Ç —Å –∑–µ–ª–µ–Ω—å—é\n"
        "‚öñÔ∏è –ö–ë–ñ–£: 20% —É–≥–ª–µ–≤–æ–¥—ã, 50% –±–µ–ª–∫–∏, 30% –∂–∏—Ä—ã\n\n"
        "ü•õ **–ü–µ—Ä–µ–∫—É—Å**\n"
        "‚úÖ –û—Ä–µ—Ö–∏, —è–±–ª–æ–∫–æ, –∫–µ—Ñ–∏—Ä, –±–∞–Ω–∞–Ω\n"
        "‚úÖ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–∞—Ç–æ–Ω—á–∏–∫–∏ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "habits_recommend")
async def habits_recommend(callback: CallbackQuery):
    await callback.message.answer(
        "üåø –ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è:\n\n"
        "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ ‚Äî **30 –º–∏–Ω/–¥–µ–Ω—å**\n"
        "üíß –ü–∏—Ç—å **1.5‚Äì2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã** –≤ –¥–µ–Ω—å\n"
        "üò¥ –õ–æ–∂–∏—Ç—å—Å—è –¥–æ 23:00 –∏ —Å–ø–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 7‚Äì8 —á–∞—Å–æ–≤\n"
        "üì¥ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å: **1 —á–∞—Å –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –¥–µ–Ω—å**\n"
        "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è/–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî 5‚Äì10 –º–∏–Ω\n"
        "üçè –ï—Å—Ç—å 4‚Äì5 —Ä–∞–∑ –≤ –¥–µ–Ω—å, –±–µ–∑ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è\n"
        "üìì –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)",
        parse_mode="Markdown"
    )
    await callback.answer()





@router.callback_query(lambda c: c.data == "show_concepts")
async def show_concepts(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—è—Ç–∏–µ:", reply_markup=definitions_keyboard())
    await callback.answer()


from app.keyboards import concept_button

@router.message(F.text.lower() == "–ø–æ–Ω—è—Ç–∏—è")
async def send_concept_button(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–Ω—è—Ç–∏–µ:", reply_markup=concept_button())




from app.keyboards import add_concept_button


class AddConceptStates(StatesGroup):
    waiting_for_idtf = State()
    waiting_for_definition = State()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–Ω—è—Ç–∏–µ")
async def show_add_concept_button(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–Ω—è—Ç–∏–µ:", reply_markup=add_concept_button())

# –ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥
@router.callback_query(lambda c: c.data == "add_concept")
async def start_add_concept(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–Ω—è—Ç–∏—è:")
    await state.set_state(AddConceptStates.waiting_for_idtf)
    await callback.answer()

# –ü–æ–ª—É—á–∞–µ–º IDTF
@router.message(AddConceptStates.waiting_for_idtf)
async def process_idtf(message: types.Message, state: FSMContext):
    await state.update_data(idtf=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è:")
    await state.set_state(AddConceptStates.waiting_for_definition)

# –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
@router.message(AddConceptStates.waiting_for_definition)
async def process_definition(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idtf = data['idtf']
    definition = message.text.strip()

    success = await add_definition_to_concept(idtf, definition)
    if success:
        await message.answer(f"‚úÖ –ü–æ–Ω—è—Ç–∏–µ '{idtf}' —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è '{idtf}'.")

    await state.clear()




# @router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–Ω—è—Ç–∏–µ")
# async def send_add_definition_button(message: Message):
#     await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=add_concept_button())

@router.callback_query(F.data == 'add_defenition')
async def show_add_definition_inline(callback: CallbackQuery):
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:", reply_markup=kb.add_concept_button())
    await callback.answer()






from app.keyboards import concept_lookup_button

class LookupConcept(StatesGroup):
    waiting_for_idtf = State()

# @router.message(F.text.lower() == "–ø–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
# async def ask_for_concept(message: Message, state: FSMContext):
#     await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:", reply_markup=concept_lookup_button())

@router.callback_query(F.data == 'found_defenition')
async def show_lookup_definition_inline(callback: CallbackQuery):
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:", reply_markup=kb.concept_lookup_button())
    await callback.answer()

@router.callback_query(F.data == "lookup_definition")
async def start_lookup(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ /define –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–Ω—è—Ç–∏—è, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:")
    await state.set_state(LookupConcept.waiting_for_idtf)
    await callback.answer()
